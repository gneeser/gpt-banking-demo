import TextareaAutosize from '@mui/base/TextareaAutosize'
import { Box, Button, Card, CardContent, CardHeader, CircularProgress, Container, CssBaseline,Paper, Typography } from '@mui/material'
import { createTheme, ThemeProvider } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';
import { textAlign } from '@mui/system';
import { DataGrid, GridColDef, GridRowsProp } from '@mui/x-data-grid';
import _ from 'lodash';
import Head from 'next/head'
import * as React from 'react';
import { FormEvent ,useState } from 'react'

interface QueryResult {
  columns: GridColDef[];
  rows: GridRowsProp;
}

export default function Index() {
  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');
  const [queryInput, setQueryInput] = useState("");
  const [sql, setSql] = useState<string | undefined>();
  const [result, setResult] = useState<QueryResult | undefined>();
  const [rendering, setRendering] = useState(false);
  const [querying, setQuerying] = useState(false);

  const theme = React.useMemo(
    () =>
      createTheme({
        palette: {
          mode: prefersDarkMode ? 'dark' : 'light',
        },
      }),
    [prefersDarkMode],
  );

  // Handle the submit event on form submit.
  const handleSubmit = async (event: FormEvent) => {
    // Stop the form from submitting and refreshing the page.
    event.preventDefault()

    // Cast the event target to an html form
    const form = event.target as HTMLFormElement

    // Get data from the form.
    const data = {
      natural_language_query: form?.natural_language_query?.value as string
    }

    setRendering(true);
    setResult(undefined);
    const sql_query = await fetch('/api/render-query', {
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',
      },
      method: 'POST',
    });

    const sql_results = await sql_query.json();

    setRendering(false);
    setSql(sql_results.data);

    setQuerying(true);
    let results;
    if (sql_results.error) {
      results = {
        data: []
      }
    } else {
      const response = await fetch('/api/submit-query', {
        body: JSON.stringify({ sql_query: sql_results }),
        headers: {
          'Content-Type': 'application/json',
        },
        method: 'POST',
      });
      results = await response.json();
    }

    const columns: GridColDef[] = _.map(_.keys(_.get(results?.data, '0', {})), (key: string) => ({
      field: key,
      headerName: _.upperFirst(key)
    }));
    const rows: GridRowsProp = _.map(results?.data, (row: Object, idx: number) => _.set(row, 'id', idx));

    setQuerying(false);
    setResult({ columns, rows });
  }

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline>
        <Container maxWidth="lg">
          <Head>
            <title>GPT Natural Language to SQL</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <Typography variant="h2" component="h1" gutterBottom align='center'>
            GPT-Powered Banking Demo
          </Typography>
          <Box sx={{ my: 4 }} alignItems="center" textAlign="center" alignContent="center">
            <Card>
              <CardHeader title="Natural Language Query" />
              <CardContent>
                <form onSubmit={handleSubmit}>
                  <label htmlFor='query'>
                    <TextareaAutosize
                      id="natural_language_query"
                      name="natural_language_query"
                      placeholder="What would you like to know?"
                      minRows={5}
                      maxRows={50}
                      cols={50}
                      required
                      value={queryInput}
                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setQueryInput(e.target.value)}
                    />
                  </label>
                  <br></br>
                  <Button variant="contained" type='submit' >{
                    rendering || querying
                      ? <Typography variant='button'>Loading...</Typography>
                      : <Typography variant='button'>Submit</Typography>
                  }</Button>
                </form>
              </CardContent>
            </Card>
            <br></br>
            <Card>
              <CardHeader title="Rendered SQL Query" />
              <CardContent>
                {(() => {
                  if (rendering) {
                    return <CircularProgress />
                  } else if (sql) {
                    return <Container>
                      <Typography variant='body1'>{sql}</Typography>
                    </Container>
                  } else {
                    return <></>
                  }
                })()}
              </CardContent>
            </Card>
            <br></br>
            <Card>
              <CardHeader title="Query Results" />
              <CardContent>
                <Box>{
                  result
                    ? <DataGrid
                      columns={result?.columns}
                      rows={result?.rows}
                      autoHeight={true}
                    />
                    : <></>
                }</Box>
              </CardContent>
            </Card>
          </Box>
        </Container>
      </CssBaseline>
    </ThemeProvider>
  );
}
