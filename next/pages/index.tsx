import Head from 'next/head'
import * as React from 'react';
import { useState, FormEvent, useEffect } from 'react'
import styles from '../styles/Home.module.css'
import TextareaAutosize from '@mui/base/TextareaAutosize'
import { CircularProgress, Box, Typography, Container, Button } from '@mui/material'
import { textAlign } from '@mui/system';
import { DataGrid, GridColDef, GridRowsProp } from '@mui/x-data-grid';
import _ from 'lodash'

export default function Index() {
  const [queryInput, setQueryInput] = useState("");
  const [sql, setSql] = useState();
  const [result, setResult] = useState();
  const [rendering, setRendering] = useState(false);
  const [querying, setQuerying] = useState(false);

  // Handle the submit event on form submit.
  const handleSubmit = async (event: FormEvent) => {
    // Stop the form from submitting and refreshing the page.
    event.preventDefault()

    // Cast the event target to an html form
    const form = event.target as HTMLFormElement

    // Get data from the form.
    const data = {
      natural_language_query: form?.natural_language_query?.value as string
    }

    setRendering(true);
    setResult(undefined);
    const sql_query = await fetch('/api/render-query', {
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',
      },
      method: 'POST',
    });

    const sql_results = await sql_query.json()

    setRendering(false);
    setSql(sql_results.data);

    setQuerying(true);
    const response = await fetch('/api/submit-query', {
      body: JSON.stringify({ sql_query: sql_results }),
      headers: {
        'Content-Type': 'application/json',
      },
      method: 'POST',
    });

    const results = await response.json()

    const columns: GridColDef[] = _.map(_.keys(_.get(results?.data, '0', {})), (key:String) => ({
      field: key,
      headerName: _.upperFirst(key)
    }));
    const rows: GridRowsProp = _.map(results?.data, (row: Object, idx: number) => _.set(row, 'id', idx));

    setQuerying(false);
    setResult({ columns, rows });
    console.log(result);
  }

  return (
    <Container maxWidth="lg">
      <Head>
        <title>GPT Natural Language to SQL</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Typography variant="h2" component="h1" gutterBottom align='center'>
        GPT-Powered Banking Demo
      </Typography>
      <Box sx={{ my: 4 }} alignItems="center" textAlign="center" alignContent="center">
        <form onSubmit={handleSubmit}>
          <label htmlFor='query'>
            <TextareaAutosize
              id="natural_language_query"
              name="natural_language_query"
              placeholder="What would you like to know?"
              minRows={5}
              maxRows={50}
              cols={50}
              required
              value={queryInput}
              onChange={(e) => setQueryInput(e.target.value)}
            />
          </label>
          <br></br>
          <Button variant="contained" type='submit' >{
            rendering || querying ? <Typography variant='button'>Loading...</Typography> : <Typography variant='button'>Submit</Typography>
          }</Button>
        </form>
        <br></br>
        {(() => {
          if (rendering) {
            return <Container><Typography>Rendering Query...</Typography><CircularProgress /></Container>
          } else if (sql) {
            return <Container>
              <Typography variant='h6'>Here's how we interpreted your query:</Typography>
              <Typography variant='body1'>{sql}</Typography>
            </Container>
          } else {
            return <></>
          }
        })()}
        <br></br>
        <Box>{
          result
            ? <DataGrid
              columns={result?.columns}
              rows={result?.rows}
              autoHeight={true}
            />
            : <></>
        }</Box>
      </Box>
    </Container>
  );
}
